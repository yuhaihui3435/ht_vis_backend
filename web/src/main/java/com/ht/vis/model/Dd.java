package com.ht.vis.model;


import com.jfinal.kit.Kv;
import com.ht.vis.model.base.BaseDd;

import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Dd extends BaseDd<Dd> {
	public static final Dd dao = new Dd().dao();

	public List<Dd> getChildren(){
		return dao.find("select * from "+getTableName()+" where pId=? and dAt is null ",getId());
	}

	public Dd findByDict(String module){
		return findFirst("select * from "+getTableName()+" where dict=? and dAt is null and pId=0",module);
	}

	public List<Dd> findParentAll(){
		return find("select * from "+getTableName()+" where dAt is null and pId=0");
	}

	public List<Dd> findByVal(String val){
		return find("select * from "+getTableName()+" where val=? and dAt is null ",val);
	}

	public List<Dd> findByNameAndPId(String name,int pId){
		return find("select * from "+getTableName()+" where name=? and pId=? and dAt is null",name,pId);
	}
	public List<Dd> findByValAndPId(String val,int pId){
		return find("select * from "+getTableName()+" where val=? and pId=? and dAt is null",val,pId);
	}

	public List<Dd> findByNameAndDictAndNeId(Dd dd){
		Kv kv= Kv.create();
		kv.put("name=",dd.getName());
		kv.put("dict=",dd.getDict());
		kv.put("id<> ",dd.getId());
		kv.put("dAt","");
		Kv  kv1=Kv.by("cond",kv);
		kv1.put("table",dd.getTableName());
		return  Dd.dao.findByAndCond(kv1);
	}

	public List<Dd> findByValAndDictAndNeId(Dd dd){
		Kv kv= Kv.create();
		kv.put("val=",dd.getVal());
		kv.put("dict=",dd.getDict());
		kv.put("id<> ",dd.getId());
		kv.put("dAt","");
		Kv  kv1=Kv.by("cond",kv);
		kv1.put("table",dd.getTableName());
		return  Dd.dao.findByAndCond(kv1);
	}


}